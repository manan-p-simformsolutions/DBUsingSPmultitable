//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBapprochBySP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentEntities1 : DbContext
    {
        public StudentEntities1()
            : base("name=StudentEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ScholarshipData> ScholarshipDatas { get; set; }
        public virtual DbSet<StudentData> StudentDatas { get; set; }
    
        public virtual int DeleteStudent(Nullable<int> scholarshipId)
        {
            var scholarshipIdParameter = scholarshipId.HasValue ?
                new ObjectParameter("ScholarshipId", scholarshipId) :
                new ObjectParameter("ScholarshipId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", scholarshipIdParameter);
        }
    
        public virtual ObjectResult<GetScholarship_Result> GetScholarship(Nullable<int> studentId, Nullable<int> scholarshipId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var scholarshipIdParameter = scholarshipId.HasValue ?
                new ObjectParameter("ScholarshipId", scholarshipId) :
                new ObjectParameter("ScholarshipId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScholarship_Result>("GetScholarship", studentIdParameter, scholarshipIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertScholarship(Nullable<int> studentId, Nullable<decimal> amount, Nullable<int> year)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertScholarship", studentIdParameter, amountParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertStudent(string name, Nullable<int> rollno, Nullable<int> @class, string address, string city)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rollnoParameter = rollno.HasValue ?
                new ObjectParameter("Rollno", rollno) :
                new ObjectParameter("Rollno", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertStudent", nameParameter, rollnoParameter, classParameter, addressParameter, cityParameter);
        }
    
        public virtual ObjectResult<StudentList_Result> StudentList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentList_Result>("StudentList");
        }
    
        public virtual int UpdateStudent(Nullable<int> studentId, Nullable<int> scholarshipId, string name, Nullable<int> rollNo, Nullable<int> @class, string city, string address, Nullable<decimal> amount, Nullable<int> year)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var scholarshipIdParameter = scholarshipId.HasValue ?
                new ObjectParameter("ScholarshipId", scholarshipId) :
                new ObjectParameter("ScholarshipId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rollNoParameter = rollNo.HasValue ?
                new ObjectParameter("RollNo", rollNo) :
                new ObjectParameter("RollNo", typeof(int));
    
            var classParameter = @class.HasValue ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudent", studentIdParameter, scholarshipIdParameter, nameParameter, rollNoParameter, classParameter, cityParameter, addressParameter, amountParameter, yearParameter);
        }
    }
}
